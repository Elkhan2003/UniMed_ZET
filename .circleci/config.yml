#version: 2.1
#parameters:
#  docker-container:
#    type: string
#    default: 'unibook-crm-admin'
#    description: 'Docker container name for Cheber Admin Production'
#  compose-file:
#    type: string
#    default: "docker-compose.crm.frontend.yml"
#    description: "Docker compose filename"
#
#jobs:
#  deploy-to-production:
#    docker:
#      - image: circleci/node:14
#      - image: docker:20.10.9
#    steps:
#      - checkout
#      - setup_remote_docker
#      - run:
#          name: Build Docker Image
#          command: |
#            docker build -t << pipeline.parameters.docker-container >>:latest .
#      - run:
#          name: Compress Docker Image
#          command: |
#            docker save << pipeline.parameters.docker-container >>:latest | gzip > << pipeline.parameters.docker-container >>.tar.gz
#      - run:
#          name: Update Docker-compose.yml
#          command: |
#            sed -i 's@#image@<< pipeline.parameters.docker-container >>:latest@g' <<pipeline.parameters.compose-file>>
#      - run: ls -lh
#      - persist_to_workspace:
#          root: .
#          paths:
#            - << pipeline.parameters.docker-container >>.tar.gz
#            - <<pipeline.parameters.compose-file>>
#  transfer-and-run:
#    docker:
#      - image: circleci/node:14
#    steps:
#      - attach_workspace:
#          at: .
#      - run:
#          name: Install SSH And Configure
#          command: |
#            echo $SSH_PRIVATE_KEY | base64 --decode > ./privateKey.pem
#            chmod 400 privateKey.pem
#      - run:
#          name: Stop Remote Docker-Compose
#          command: |
#            ssh -o "StrictHostKeyChecking=no" -i ./privateKey.pem ubuntu@$HOST '
#            if [ -f <<pipeline.parameters.compose-file>> ]; then
#            sudo docker-compose -f <<pipeline.parameters.compose-file>> down --rmi all
#            sudo rm <<pipeline.parameters.compose-file>>
#            else
#            echo "<<pipeline.parameters.compose-file>> not found"
#            fi
#            '
#      - run:
#          name: Transfer Files
#          command: |
#            scp -o "StrictHostKeyChecking=no" -i ./privateKey.pem ./<< pipeline.parameters.docker-container >>.tar.gz ./<<pipeline.parameters.compose-file>> ubuntu@$HOST:~/
#      - run:
#          name: Decompress Docker Image | Run Compose
#          command: |
#            ssh -o "StrictHostKeyChecking=no" -i ./privateKey.pem ubuntu@$HOST '
#            sudo gunzip -c ./<< pipeline.parameters.docker-container >>.tar.gz | sudo docker load
#            sudo rm ./<< pipeline.parameters.docker-container >>.tar.gz
#            sudo docker-compose -f <<pipeline.parameters.compose-file>> up -d
#            '
#workflows:
#  deploy-prod:
#    jobs:
#      - deploy-to-production:
#          filters:
#            branches:
#              only:
#                - develop
#      - transfer-and-run:
#          requires:
#            - deploy-to-production
#          filters:
#            branches:
#              only:
#                - develop

version: 2.1

parameters:
  docker-image:
    type: string
    default: 'unibook-crm-frontend'
    description: 'Docker container name for UniBook Admin Production'
  username:
    type: string
    default: "aksoft"
    description: "SSH host username"
  docker-compose:
    type: string
    default: "/home/aksoft/docker-compose.crm.frontend.yml"
    description: "Docker Compose file path"

jobs:
  deploy-to-dev:
    docker:
      - image: circleci/node:14
      - image: docker:20.10.9
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
            docker build -t << pipeline.parameters.docker-image >>:latest .
      - run:
          name: Compress Docker Image
          command: |
            docker save << pipeline.parameters.docker-image >>:latest | gzip > << pipeline.parameters.docker-image >>.tar.gz
      - run: ls -lh
      - persist_to_workspace:
          root: .
          paths:
            - << pipeline.parameters.docker-image >>.tar.gz

  transfer-and-run:
    docker:
      - image: circleci/node:14
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install SSH And Configure
          command: |
            echo $SSH_PRIVATE_KEY_LOCAL | base64 --decode > ./id_rsa
            chmod 400 id_rsa
      - run:
          name: Transfer Files
          command: |
            scp -o "StrictHostKeyChecking=no" -i ./id_rsa ./<< pipeline.parameters.docker-image >>.tar.gz << pipeline.parameters.username >>@$LOCALHOST:~/
      - run:
          name: Update Remote Docker-compose.yml
          command: |
            ssh -o "StrictHostKeyChecking=no" -i ./id_rsa << pipeline.parameters.username >>@$LOCALHOST '
            sed -i 's@#image@<< pipeline.parameters.docker-image >>:latest@g' << pipeline.parameters.docker-compose >>
            '
      - run:
          name: Stop Remote Docker-Compose
          command: |
            ssh -o "StrictHostKeyChecking=no" -i ./id_rsa << pipeline.parameters.username >>@$LOCALHOST '
            if [ -f << pipeline.parameters.docker-compose >> ]; then
            docker-compose -f << pipeline.parameters.docker-compose >> down --rmi all
            else
            echo "<< pipeline.parameters.docker-compose >> not found"
            fi
            '
      - run:
          name: Decompress Docker Image | Run Compose
          command: |
            ssh -o "StrictHostKeyChecking=no" -i ./id_rsa << pipeline.parameters.username >>@$LOCALHOST '
            gunzip -c ./<< pipeline.parameters.docker-image >>.tar.gz | docker load
            rm ./<< pipeline.parameters.docker-image >>.tar.gz
            if [ -f << pipeline.parameters.docker-compose >> ]; then
            docker-compose -f << pipeline.parameters.docker-compose >> up -d
            else
            echo "<< pipeline.parameters.docker-compose >> not found"
            fi
            '

workflows:
  deploy-to-development:
    jobs:
      - deploy-to-dev:
          filters:
            branches:
              only:
                - develop
      - transfer-and-run:
          requires:
            - deploy-to-dev
          filters:
            branches:
              only:
                - develop
